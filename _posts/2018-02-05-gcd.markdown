---
layout: post
title:  "GCD学习总结!"
date:   2018-02-05 15:42:42 +0800
categories: jekyll update
---

# 1.什么是GCD？

先看Wikipedia的描述
	
> Grand Central Dispatch (GCD) is a technology developed by Apple Inc. to optimize application support for systems with multi-core processors and other symmetric multiprocessing systems.[2] It is an implementation of task parallelism based on the thread pool pattern. The fundamental idea is to move the management of the thread pool out of the hands of the developer, and closer to the operating system. The developer injects "work packages" into the pool oblivious of the pool's architecture. This model improves simplicity, portability and performance.

GCD是苹果公司提供的优化多核处理器和多线程的一种技术。GCD基于[thread pool pattern](https://en.wikipedia.org/wiki/Thread_pool)设计模式。让开发者更容易上手也更贴近操作系统。改善易用性和性能。

# 2.GCD涉及到的概念

1.Dispatch Queues

Dispatch Queues是一个队列对象，负责管理并执行任务。GCD会自动创建几个不同权限的并发队列，根据系统环境选择最优的任务个数。客户端也可以自己创建串行队列，来访问一些多线程需要加锁的对象。

2.Dispatch Groups 

Dispatch Groups 可以看成多个任务的集合，一般需要在多个并发任务的最后一个任务结束后，再执行其他任务的情况下会用到。

3.Dispatch Semaphores

Dispatch Semaphores 可以用来管理最大并发任务的个数。


# 3.详细用法

## 1.Dispatch Queues


Dispatch Queues 按照执行顺序可以分为两种，串行（Serial Dispatch Queue）和并发（Concurrent Dispatch Queue），你可以这样创建他们
	
	dispatch_queue_t serialQueue = dispatch_queue_create("com.gcd.serial", DISPATCH_QUEUE_SERIAL);
	
	dispatch_queue_t concurrentQueue = dispatch_queue_create("com.gcd.concurrent", DISPATCH_QUEUE_CONCURRENT);
	
其中，串行队列可以有效的防止数据竞争。


系统会默认创建一个主线程队列（Main Dispatch Queue）和几个不同优先级的全局队列（Global Dispatch Queue）。

Main Dispatch Queue 是串行队列，所有UI的炒作都应放在这个线程。需要注意的一点是，不要在主线程做与UI无关的耗时的操作，这样会让你的应用变得很卡。

Global Dispatch Queue 是并行队列，一共分为4个优先级（High Priority，Default Priority，Low Priority，Background Priority），这里可以执行一些和UI无关的耗时的操作，但是要注意避免多个队列同时访问一个资源的情况。

	//得到主线程队列
	dispatch_queue_t mainDispatchQueue = dispatch_get_main_queue();
	
	//得到全局队列，依次为高、中、低、后台队列。
    dispatch_queue_t globalDispatchQueueHigh = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);

    dispatch_queue_t globalDispatchQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

    dispatch_queue_t globalDispatchQueueLow = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0);

    dispatch_queue_t globalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);


## 2.Dispatch Groups

如果需要等待多个任务执行结束后再执行其他任务，那么Dispatch Groups是一个很好的选择。Dispatch Groups会把一系列任务打包处理，并且会在最后一个任务执行结束后通知你。Dispatch Groups执行顺序是串行还是并行完全取决于他依赖的队列。

	dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_group_t group = dispatch_group_create();
    dispatch_group_async(group, queue, ^{
        //some task
    });
    dispatch_group_async(group, queue, ^{
        //some task
    });
    
    dispatch_group_notify(group, dispatch_get_main_queue(), ^{
        //all tasks complete!
    });



## 3.Dispatch Semaphores

Dispatch Semaphores 可以用来管理最大并发任务的个数。
	
	//用来设置最多允许执行的信号总量。
	dispatch_semaphore_t dispatch_semaphore_create(long value);
	
	//这个函数会使传入的信号量dsema的值减1,如果dsema信号量的值大于0，
	该函数所处线程就继续执行下面的语句，并且将信号量的值减1,
	如果desema的值为0，那么这个函数就阻塞当前线程等待timeout
	long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout);


	//这个函数会使传入的信号量dsema的值加1
	long dispatch_semaphore_signal(dispatch_semaphore_t dsema)

　　
## 4.dispatch_sync
	//同步执行，不能传入当前队列，会造成死锁
	dispatch_sync(dispatch_queue_t  _Nonnull queue, ^{
        
    })
    
## 5.dispatch_async
	//异步执行
	dispatch_async(<#dispatch_queue_t  _Nonnull queue#>, ^{
        <#code#>
    })    
## 6.dispatch_after

	//延迟几秒执行
	dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<#delayInSeconds#> * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        <#code to be executed after a specified delay#>
    });    
## 7.dispatch_once
	//只执行一次，一般用于创建单例
 	static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        <#code to be executed once#>
    });
    
## 8.dispatch_barrier_async
	//dispatch_barrier_async顾名思义，就是一个栅栏。在并行队列中，会执行完barrier之前的任务，再执行barrier中的任务，再执行barrier后面的任务。
	dispatch_queue_t queue = dispatch_queue_create("concurrentQueue", DISPATCH_QUEUE_CONCURRENT);

    dispatch_async(queue, ^{
        NSLog(@"1");
    });
    dispatch_async(queue, ^{
        NSLog(@"2");
    });

    // 在它前面的任务执行结束后它才执行，在它后面的任务等它执行完成后才会执行
    dispatch_barrier_async(queue, ^{
        NSLog(@"barrier");
    });

    dispatch_async(queue, ^{
        NSLog(@"3");
    });
    dispatch_async(queue, ^{
        NSLog(@"4");
    });
	执行结果是先打印1，2（1，2无序，也可能是2，1），再打印barrier，再打印3，4（无序）。
	